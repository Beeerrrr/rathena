name: Chaos Branch Sync & CI

on:
  schedule:
    # Weekly upstream sync check (Sundays at 2 AM UTC)
    - cron: '0 2 * * 0'
  
  push:
    branches: [ chaos, 'feature/chaos-*', 'hotfix/chaos-*' ]
  
  pull_request:
    branches: [ chaos ]
  
  workflow_dispatch:
    inputs:
      sync_upstream:
        description: 'Force upstream sync'
        required: false
        default: false
        type: boolean

env:
  UPSTREAM_REPO: rathena/rathena
  UPSTREAM_BRANCH: master

jobs:
  # Check for upstream changes
  upstream-check:
    runs-on: ubuntu-latest
    outputs:
      has_updates: ${{ steps.check.outputs.has_updates }}
      latest_commit: ${{ steps.check.outputs.latest_commit }}
    
    steps:
    - name: Checkout Chaos branch
      uses: actions/checkout@v4
      with:
        ref: chaos
        fetch-depth: 0
    
    - name: Add upstream remote
      run: |
        git remote add upstream https://github.com/${{ env.UPSTREAM_REPO }}.git || true
        git remote set-url upstream https://github.com/${{ env.UPSTREAM_REPO }}.git
        git fetch upstream ${{ env.UPSTREAM_BRANCH }}
    
    - name: Check for upstream updates
      id: check
      run: |
        # Get latest upstream commit
        LATEST_UPSTREAM=$(git rev-parse upstream/${{ env.UPSTREAM_BRANCH }})
        echo "latest_commit=$LATEST_UPSTREAM" >> $GITHUB_OUTPUT
        
        # Check if main branch is behind upstream
        git checkout main 2>/dev/null || git checkout -b main upstream/${{ env.UPSTREAM_BRANCH }}
        MAIN_COMMIT=$(git rev-parse HEAD)
        
        if [ "$LATEST_UPSTREAM" != "$MAIN_COMMIT" ]; then
          echo "has_updates=true" >> $GITHUB_OUTPUT
          echo "Upstream has new commits"
        else
          echo "has_updates=false" >> $GITHUB_OUTPUT
          echo "Main branch is up to date"
        fi

  # Update main branch from upstream
  sync-main:
    needs: upstream-check
    if: needs.upstream-check.outputs.has_updates == 'true' || github.event.inputs.sync_upstream == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Configure Git
      run: |
        git config user.name "Chaos Bot"
        git config user.email "chaos-bot@noreply.github.com"
    
    - name: Add upstream and sync main
      run: |
        git remote add upstream https://github.com/${{ env.UPSTREAM_REPO }}.git || true
        git fetch upstream ${{ env.UPSTREAM_BRANCH }}
        
        # Switch to main branch (or create it)
        git checkout main 2>/dev/null || git checkout -b main
        
        # Fast-forward merge from upstream
        git merge upstream/${{ env.UPSTREAM_BRANCH }} --ff-only || {
          echo "Cannot fast-forward main branch. Manual intervention required."
          exit 1
        }
        
        # Push updated main branch
        git push origin main
    
    - name: Create sync summary
      run: |
        echo "## Upstream Sync Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Synced main branch with upstream/${{ env.UPSTREAM_BRANCH }}" >> $GITHUB_STEP_SUMMARY
        echo "- Latest upstream commit: ${{ needs.upstream-check.outputs.latest_commit }}" >> $GITHUB_STEP_SUMMARY
        
        # Get commit count difference
        COMMIT_COUNT=$(git rev-list --count HEAD~1..HEAD)
        echo "- New commits: $COMMIT_COUNT" >> $GITHUB_STEP_SUMMARY

  # Compile and test
  build-and-test:
    runs-on: ubuntu-latest
    needs: [upstream-check]
    if: always()
    
    strategy:
      matrix:
        compiler: [gcc-9, gcc-11, clang-12]
        mode: [pre-renewal, renewal]
    
    steps:
    - name: Checkout Chaos branch
      uses: actions/checkout@v4
      with:
        ref: chaos
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          mysql-server \
          libmysqlclient-dev \
          zlib1g-dev \
          libpcre3-dev \
          cmake \
          ${{ matrix.compiler }}
    
    - name: Setup MySQL
      run: |
        sudo systemctl start mysql
        sudo mysql -e "CREATE DATABASE ragnarok;"
        sudo mysql -e "CREATE USER 'ragnarok'@'localhost' IDENTIFIED BY 'ragnarok';"
        sudo mysql -e "GRANT ALL PRIVILEGES ON ragnarok.* TO 'ragnarok'@'localhost';"
        sudo mysql -e "FLUSH PRIVILEGES;"
    
    - name: Configure build
      run: |
        mkdir build
        cd build
        
        CMAKE_OPTIONS=""
        if [ "${{ matrix.mode }}" = "renewal" ]; then
          CMAKE_OPTIONS="-DRENEWAL=ON"
        fi
        
        CC=${{ matrix.compiler }} cmake .. $CMAKE_OPTIONS
    
    - name: Build rAthena
      run: |
        cd build
        make -j$(nproc)
    
    - name: Import database
      run: |
        mysql -u ragnarok -pragnarok ragnarok < sql-files/main.sql
        mysql -u ragnarok -pragnarok ragnarok < sql-files/logs.sql
    
    - name: Test server startup
      timeout-minutes: 2
      run: |
        cd build
        
        # Start servers in background
        ./login-server --run-once &
        LOGIN_PID=$!
        sleep 2
        
        ./char-server --run-once &
        CHAR_PID=$!
        sleep 2
        
        ./map-server --run-once &
        MAP_PID=$!
        sleep 5
        
        # Check if servers are running
        if kill -0 $LOGIN_PID 2>/dev/null; then
          echo "Login server started successfully"
        else
          echo "Login server failed to start"
          exit 1
        fi
        
        # Cleanup
        kill $LOGIN_PID $CHAR_PID $MAP_PID 2>/dev/null || true

  # Performance benchmarking
  performance-test:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/chaos'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: chaos
    
    - name: Setup environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential mysql-server libmysqlclient-dev zlib1g-dev libpcre3-dev cmake
        sudo systemctl start mysql
        sudo mysql -e "CREATE DATABASE ragnarok;"
        sudo mysql -e "CREATE USER 'ragnarok'@'localhost' IDENTIFIED BY 'ragnarok';"
        sudo mysql -e "GRANT ALL PRIVILEGES ON ragnarok.* TO 'ragnarok'@'localhost';"
    
    - name: Build with optimizations
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DRENEWAL=ON ..
        make -j$(nproc)
    
    - name: Run performance benchmarks
      run: |
        # Import database
        mysql -u ragnarok -pragnarok ragnarok < sql-files/main.sql
        
        cd build
        
        # Create benchmark script
        cat > benchmark.sh << 'EOF'
        #!/bin/bash
        
        # Start servers
        ./login-server &
        LOGIN_PID=$!
        sleep 3
        
        ./char-server &
        CHAR_PID=$!
        sleep 3
        
        ./map-server &
        MAP_PID=$!
        sleep 5
        
        # Monitor performance for 30 seconds
        echo "Monitoring server performance..."
        timeout 30 top -p $LOGIN_PID,$CHAR_PID,$MAP_PID -b -n 6 | grep -E "(login-server|char-server|map-server)" > performance.log
        
        # Cleanup
        kill $LOGIN_PID $CHAR_PID $MAP_PID 2>/dev/null || true
        wait
        
        # Display results
        echo "Performance Results:"
        cat performance.log
        EOF
        
        chmod +x benchmark.sh
        ./benchmark.sh
    
    - name: Archive performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results-${{ github.sha }}
        path: build/performance.log

  # Chaos-specific feature validation
  chaos-validation:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/chaos'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: chaos
    
    - name: Setup Python environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install RO Agent dependencies
      run: |
        cd "Ragnarok Online Agent"
        pip install -r requirements.txt
    
    - name: Validate RO Agent
      run: |
        cd "Ragnarok Online Agent"
        python src/cli.py --help
        python src/cli.py status
    
    - name: Test caching system
      run: |
        cd "Ragnarok Online Agent"
        python -c "
        from src.cache_manager import CacheManager
        from pathlib import Path
        
        # Test cache manager
        cache = CacheManager(Path('test_cache'))
        
        # Test L1 cache
        cache.set('test', 'key1', 'value1', 60)
        result = cache.get('test', 'key1')
        assert result == 'value1', f'Expected value1, got {result}'
        
        # Test stats
        stats = cache.get_stats()
        print(f'Cache stats: {stats}')
        
        print('Cache system validation passed')
        "
    
    - name: Test knowledge base enhancements
      run: |
        cd "Ragnarok Online Agent"
        python -c "
        from src.knowledge_base import KnowledgeBase
        
        kb = KnowledgeBase()
        
        # Test architecture info
        arch_info = kb.get_architecture_info()
        assert 'rAthena Server Architecture' in arch_info
        
        # Test performance guide
        perf_guide = kb.get_performance_guide()
        assert len(perf_guide) > 0
        
        # Test branch strategy
        branch_info = kb.get_branch_strategy()
        assert 'Branch Management Strategy' in branch_info
        
        print('Knowledge base enhancements validated')
        "

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: upstream-check
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: chaos
    
    - name: Run CodeQL analysis
      uses: github/codeql-action/init@v2
      with:
        languages: cpp, python
    
    - name: Build for analysis
      run: |
        mkdir build
        cd build
        cmake ..
        make -j$(nproc)
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Notify results
  notify-results:
    runs-on: ubuntu-latest
    needs: [upstream-check, sync-main, build-and-test, chaos-validation, security-scan]
    if: always()
    
    steps:
    - name: Create summary
      run: |
        echo "# Chaos Branch CI/CD Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Upstream sync status
        if [ "${{ needs.sync-main.result }}" = "success" ]; then
          echo "✅ Upstream sync completed successfully" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.upstream-check.outputs.has_updates }}" = "false" ]; then
          echo "ℹ️ No upstream updates available" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Upstream sync failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Build status
        if [ "${{ needs.build-and-test.result }}" = "success" ]; then
          echo "✅ Build and tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Build or tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Chaos validation
        if [ "${{ needs.chaos-validation.result }}" = "success" ]; then
          echo "✅ Chaos features validated" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.chaos-validation.result }}" = "skipped" ]; then
          echo "⏭️ Chaos validation skipped (not chaos branch)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Chaos validation failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Security scan
        if [ "${{ needs.security-scan.result }}" = "success" ]; then
          echo "✅ Security scan completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Security scan failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "View detailed results in the workflow logs above." >> $GITHUB_STEP_SUMMARY