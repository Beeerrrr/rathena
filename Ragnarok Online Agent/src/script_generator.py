"""
Script Generation System for Ragnarok Online Servers
Generates NPC, item, and mob scripts with intelligent templates
"""

import os
from pathlib import Path
from typing import Optional, Dict, List
from datetime import datetime
import re

class ScriptGenerator:
    """Generates RO scripts using templates and AI assistance"""

    def __init__(self, server_path: Path):
        self.server_path = server_path
        self.templates_dir = server_path / "templates"
        self.templates_dir.mkdir(exist_ok=True)
        self.cache_dir = server_path / "ANALYSIS_CACHE" / "scripts"
        self.cache_dir.mkdir(parents=True, exist_ok=True)

        # Initialize default templates
        self._create_default_templates()

    def _create_default_templates(self):
        """Create default script templates"""
        templates = {
            'npc_shop.txt': self._get_shop_template(),
            'npc_quest.txt': self._get_quest_template(),
            'npc_warp.txt': self._get_warp_template(),
            'item_basic.txt': self._get_item_template(),
            'mob_basic.txt': self._get_mob_template()
        }

        for template_name, content in templates.items():
            template_path = self.templates_dir / template_name
            if not template_path.exists():
                with open(template_path, 'w', encoding='utf-8') as f:
                    f.write(content)

    def _get_shop_template(self) -> str:
        """Get shop NPC template"""
        return '''// Shop NPC Template
// Generated by RO Agent on {timestamp}

{map_name},{x},{y},{direction}\tscript\t{npc_name}\t{npc_sprite},{{

mes "[{npc_name}]";
mes "Welcome to my shop!";
mes "What would you like to buy?";
next;

switch(select("Weapons:Armor:Items:Cancel")) {{
    case 1:
        // Weapon shop
        callshop "weapon_shop",1;
        break;
    case 2:
        // Armor shop
        callshop "armor_shop",1;
        break;
    case 3:
        // Item shop
        callshop "item_shop",1;
        break;
    case 4:
        mes "[{npc_name}]";
        mes "Come back anytime!";
        close;
}}

close;
}}

// Shop definitions
- shop weapon_shop -1,{weapon_items}
- shop armor_shop -1,{armor_items}
- shop item_shop -1,{item_list}
'''

    def _get_quest_template(self) -> str:
        """Get quest NPC template"""
        return '''// Quest NPC Template
// Generated by RO Agent on {timestamp}

{map_name},{x},{y},{direction}\tscript\t{npc_name}\t{npc_sprite},{{

if ({quest_variable} == 0) {{
    // First time talking
    mes "[{npc_name}]";
    mes "{dialog}";
    next;
    mes "[{npc_name}]";
    mes "Will you help me?";
    if (select("Yes:No") == 1) {{
        mes "[{npc_name}]";
        mes "Great! Here's what you need to do...";
        set {quest_variable},1;
        close;
    }}
    mes "[{npc_name}]";
    mes "Come back when you're ready.";
    close;
}}

if ({quest_variable} == 1) {{
    // Quest in progress
    mes "[{npc_name}]";
    mes "How is the quest going?";
    // Add quest completion checks here
    close;
}}

close;
}}
'''

    def _get_warp_template(self) -> str:
        """Get warp NPC template"""
        return '''// Warp NPC Template
// Generated by RO Agent on {timestamp}

{map_name},{x},{y},{direction}\tscript\t{npc_name}\t{npc_sprite},{{

mes "[{npc_name}]";
mes "Hello! I can take you to {destination_name}.";
mes "Would you like to go there?";
mes "It will cost {cost} zeny.";
next;

if (select("Yes:No") == 1) {{
    if (Zeny >= {cost}) {{
        set Zeny, Zeny - {cost};
        warp "{destination_map}",{dest_x},{dest_y};
    }} else {{
        mes "[{npc_name}]";
        mes "You don't have enough zeny!";
        close;
    }}
}}

mes "[{npc_name}]";
mes "Safe travels!";
close;
}}
'''

    def _get_item_template(self) -> str:
        """Get item template"""
        return '''// Item Database Entry
// Generated by RO Agent on {timestamp}
// Item ID: {item_id}

{item_id},{{
    Id: {item_id}
    AegisName: "{aegis_name}"
    Name: "{item_name}"
    Type: {item_type}
    Buy: {buy_price}
    Sell: {sell_price}
    Weight: {weight}
    {additional_properties}
}}
'''

    def _get_mob_template(self) -> str:
        """Get monster template"""
        return '''// Monster Database Entry
// Generated by RO Agent on {timestamp}
// Monster ID: {mob_id}

{mob_id},{{
    Id: {mob_id}
    SpriteName: "{sprite_name}"
    Name: "{mob_name}"
    Lv: {level}
    Hp: {hp}
    Sp: {sp}
    Exp: {base_exp}
    JExp: {job_exp}
    Attack: {attack}
    Attack2: {attack2}
    Defense: {defense}
    MagicDefense: {magic_defense}
    Str: {str}
    Agi: {agi}
    Vit: {vit}
    Int: {int}
    Dex: {dex}
    Luk: {luk}
    AttackRange: {attack_range}
    SkillRange: {skill_range}
    ChaseRange: {chase_range}
    Size: "{size}"
    Race: "{race}"
    Element: ({element}, {element_level})
    Mode: {{
        CanMove: true
        Looter: false
        Aggressive: true
        Assist: true
        CastSensorIdle: true
        Boss: false
        Plant: false
        CanAttack: true
        Detector: false
        CastSensorChase: false
        ChangeChase: false
        Angry: false
        ChangeTargetMelee: false
        ChangeTargetChase: false
        TargetWeak: false
        RandomTarget: false
        IgnoreTarget: false
        RandomWalk: true
        CastSensorIdle: true
        CastSensorChase: false
    }}
    MoveSpeed: {move_speed}
    AttackDelay: {attack_delay}
    AttackMotion: {attack_motion}
    DamageMotion: {damage_motion}
    Ai: "{ai_type}"
}}
'''

    def generate_npc(self, npc_type: str, name: str, items: Optional[str] = None,
                     dialog: Optional[str] = None, **kwargs) -> str:
        """Generate NPC script"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # Default values
        template_data = {
            'timestamp': timestamp,
            'npc_name': name,
            'npc_sprite': kwargs.get('sprite', '4_F_01'),  # Default female NPC
            'map_name': kwargs.get('map', 'prontera'),
            'x': kwargs.get('x', 150),
            'y': kwargs.get('y', 150),
            'direction': kwargs.get('direction', 4),
            'dialog': dialog or f"Hello, I am {name}!",
            'quest_variable': f"quest_{name.lower().replace(' ', '_')}"
        }

        if npc_type == 'shop':
            template_data.update(self._prepare_shop_data(items))
            template = self._get_shop_template()
        elif npc_type == 'quest':
            template = self._get_quest_template()
        elif npc_type == 'warp':
            template_data.update(self._prepare_warp_data(kwargs))
            template = self._get_warp_template()
        else:
            return f"Unknown NPC type: {npc_type}"

        # Generate script
        script = template.format(**template_data)

        # Save to file
        self._save_script(script, f"npc_{name.lower().replace(' ', '_')}.txt")

        return f"Generated {npc_type} NPC script for {name}"

    def _prepare_shop_data(self, items: Optional[str]) -> Dict[str, str]:
        """Prepare shop-specific data"""
        if not items:
            # Default items
            weapon_items = "1201,1204,1207"  # Knife, Sword, Rod
            armor_items = "2301,2304,2307"  # Cotton Shirt, Silk Robe, Scapulare
            item_list = "501,502,503"  # Red Potion, Orange Potion, Yellow Potion
        else:
            # Parse provided items
            item_list = items.replace(' ', '')
            weapon_items = item_list
            armor_items = item_list
            item_list = items

        return {
            'weapon_items': weapon_items,
            'armor_items': armor_items,
            'item_list': item_list
        }

    def _prepare_warp_data(self, kwargs: Dict) -> Dict[str, str]:
        """Prepare warp-specific data"""
        return {
            'destination_name': kwargs.get('destination_name', 'another place'),
            'destination_map': kwargs.get('destination_map', 'prontera'),
            'dest_x': kwargs.get('dest_x', 150),
            'dest_y': kwargs.get('dest_y', 150),
            'cost': kwargs.get('cost', 100)
        }

    def generate_item(self, item_id: int, name: str, item_type: str = 'etc',
                     price: int = 0, **kwargs) -> str:
        """Generate item database entry"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        template_data = {
            'timestamp': timestamp,
            'item_id': item_id,
            'aegis_name': name.lower().replace(' ', '_'),
            'item_name': name,
            'item_type': item_type.upper(),
            'buy_price': price,
            'sell_price': price // 2,
            'weight': kwargs.get('weight', 10),
            'additional_properties': self._get_item_properties(item_type, kwargs)
        }

        template = self._get_item_template()
        script = template.format(**template_data)

        # Save to file
        self._save_script(script, f"item_{item_id}_{name.lower().replace(' ', '_')}.txt")

        return f"Generated item script for {name} (ID: {item_id})"

    def _get_item_properties(self, item_type: str, kwargs: Dict) -> str:
        """Get additional item properties based on type"""
        properties = []

        if item_type.lower() == 'weapon':
            properties.extend([
                f"WeaponLv: {kwargs.get('weapon_level', 1)}",
                f"Attack: {kwargs.get('attack', 10)}",
                f"Range: {kwargs.get('range', 1)}"
            ])
        elif item_type.lower() == 'armor':
            properties.extend([
                f"Defense: {kwargs.get('defense', 5)}",
                f"Locations: {kwargs.get('locations', 'Head_Top')}"
            ])

        return '\n    '.join(properties)

    def generate_mob(self, mob_id: int, name: str, **kwargs) -> str:
        """Generate monster database entry"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        template_data = {
            'timestamp': timestamp,
            'mob_id': mob_id,
            'sprite_name': name.lower().replace(' ', '_'),
            'mob_name': name,
            'level': kwargs.get('level', 1),
            'hp': kwargs.get('hp', 100),
            'sp': kwargs.get('sp', 10),
            'base_exp': kwargs.get('base_exp', 10),
            'job_exp': kwargs.get('job_exp', 5),
            'attack': kwargs.get('attack', 10),
            'attack2': kwargs.get('attack2', 15),
            'defense': kwargs.get('defense', 5),
            'magic_defense': kwargs.get('magic_defense', 5),
            'str': kwargs.get('str', 1),
            'agi': kwargs.get('agi', 1),
            'vit': kwargs.get('vit', 1),
            'int': kwargs.get('int', 1),
            'dex': kwargs.get('dex', 1),
            'luk': kwargs.get('luk', 1),
            'attack_range': kwargs.get('attack_range', 1),
            'skill_range': kwargs.get('skill_range', 1),
            'chase_range': kwargs.get('chase_range', 1),
            'size': kwargs.get('size', 'Medium'),
            'race': kwargs.get('race', 'Formless'),
            'element': kwargs.get('element', 0),
            'element_level': kwargs.get('element_level', 1),
            'move_speed': kwargs.get('move_speed', 150),
            'attack_delay': kwargs.get('attack_delay', 1000),
            'attack_motion': kwargs.get('attack_motion', 1000),
            'damage_motion': kwargs.get('damage_motion', 1000),
            'ai_type': kwargs.get('ai_type', '01')
        }

        template = self._get_mob_template()
        script = template.format(**template_data)

        # Save to file
        self._save_script(script, f"mob_{mob_id}_{name.lower().replace(' ', '_')}.txt")

        return f"Generated monster script for {name} (ID: {mob_id})"

    def _save_script(self, content: str, filename: str):
        """Save generated script to appropriate location"""
        # Try to find the correct directory based on server structure
        script_dirs = ['npc', 'scripts', 'db']

        for script_dir in script_dirs:
            target_dir = self.server_path / script_dir
            if target_dir.exists():
                script_path = target_dir / filename
                with open(script_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                return script_path

        # Fallback to cache directory
        script_path = self.cache_dir / filename
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write(content)
        return script_path

    def list_templates(self) -> List[str]:
        """List available script templates"""
        return [f.name for f in self.templates_dir.glob('*.txt')]

    def get_template(self, template_name: str) -> Optional[str]:
        """Get template content"""
        template_path = self.templates_dir / template_name
        if template_path.exists():
            with open(template_path, 'r', encoding='utf-8') as f:
                return f.read()
        return None